# roles/rdir/tasks/main.yml
---
- name: "Include {{ ansible_distribution }} variables"
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags:
    - install
    - configure

- name: "Include {{ ansible_distribution }} tasks"
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: install

- name: Set properties
  set_fact:
    _rdir:
      volume: "{{ item.1.volume }}"  # mandatory
      name: "{{ openio_rdir_type }}-{{ item.1.id | default(item.0) }}"  # calculated
      id: "{{ item.1.id | default(item.0) }}"  # mandatory
      port: "{{ item.1.port }}"  # mandatory
      state: "{{ item.1.state | d('present') }}"
  with_indexed_items: "{{ openio_rdir_instances }}"
  register: _rdir_properties
  tags:
    - install
    - configure

- name: Ensure namespace directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: openio
    group: openio
    mode: "0755"
  with_items:
    - "/etc/gridinit.d/{{ openio_rdir_namespace }}"
    - "/etc/oio/sds/{{ openio_rdir_namespace }}/watch"
  tags: configure

- name: "Include tasks for rdir state"
  include_tasks: "{{ rd.ansible_facts._rdir.state }}.yml"
  tags:
    - install
    - configure
  with_items: "{{ _rdir_properties.results }}"
  loop_control:
    loop_var: rd

- name: "Reload gridinit to apply the new configuration"
  shell: gridinit_cmd reload
  tags: configure
  when:
    - not openio_rdir_provision_only
    - need_reload | default(false)

- name: "restart rdir to apply the new configuration"
  command: "gridinit_cmd restart  {{ openio_rdir_namespace }}-{{ item.ansible_facts._rdir.name }}"
  tags: configure
  with_items: "{{ _rdir_properties.results }}"
  when:
    - item.ansible_facts._rdir.state == "present"
    - _rdir_conf is changed
    - not openio_rdir_provision_only

- block:
    - name: "Ensure rdir is started"
      command: "gridinit_cmd start {{ openio_rdir_namespace }}-{{ item.ansible_facts._rdir.name }}"
      register: _start_rdir
      changed_when: '"Success" in _start_rdir.stdout'
      when: item.ansible_facts._rdir.state == "present"
      with_items: "{{ _rdir_properties.results }}"

    - name: check rdir
      uri:
        url: "http://{{ openio_rdir_bind_address }}:{{ item.ansible_facts._rdir.port }}/status"
        return_content: true
        status_code: 200
      register: _rdir_check
      retries: 15
      delay: 1
      until: _rdir_check is success
      changed_when: false
      with_items: "{{ _rdir_properties.results }}"
      when: item.ansible_facts._rdir.state == "present"
  tags: configure
  when:
    - not openio_rdir_provision_only
    - openio_bootstrap | d(false)
...
